flush ruleset

table inet filter {
	set privileged_hosts_v4 {
		type ipv4_addr
		flags interval
		elements = {
			23.128.96.0/24,		# John's FMT2 block
			50.126.75.182,		# John's Home IP
		}
	}

	set privileged_hosts_v6 {
		type ipv6_addr
		flags interval
		elements = {
			2620:137:e000::/44, 	# John's v6 block
			2001:470:b:312::/64,	# John's TunnelBroker /64 v6 block
			2001:470:e8b6::/48,	# John's TunnelBroker /48 v6 block
		}
	}

        set blocked_ipv4 {
                type ipv4_addr
                flags interval
                elements = {
                        1.180.0.0/14, # China Mobile
                        27.224.0.0/14, # China Mobile
                        36.128.0.0/10, # China Mobile
                        39.128.0.0/10, # China Mobile
                        42.88.0.0/10, # China Mobile
                        42.185.0.0/16, # China Mobile
                        49.64.0.0/11, # China Mobile
                        58.208.0.0/12, # China Mobile
                        60.218.0.0/13, # China Mobile
                        61.163.0.0/16, # China Mobile
                        111.0.0.0/10, # China Mobile
                        111.85.0.0/16, # China Mobile
                        112.0.0.0/10, # China Mobile
                        112.224.0.0/11, # China Mobile
                        115.48.0.0/12, # China Mobile
                        117.128.0.0/10, # China Mobile
                        125.40.0.0/13, # China Mobile
                        180.96.0.0/11, # China Mobile
                        180.178.192.0/18, # China Hangzhou
                        182.112.0.0/12, # China Mobile
                        218.30.0.0/15, # China Mobile
                        221.224.0.0/13, # China Mobile
                        223.64.0.0/10, # China Mobile
                }
        }

        set blocked_ipv6 {
                type ipv6_addr
                flags interval
                elements = {
                        2409:8000::/20, # China Mobile
                }
        }


	chain input {
		type filter hook input priority 0;
		policy drop;

		# established/related connections
		ct state established,related accept

		# invalid connections
		ct state invalid drop

		# loopback interface
		iif lo accept

                ip saddr @blocked_ipv4 drop
                ip6 saddr @blocked_ipv6 drop


		# ICMP & IGMP
		ip6 nexthdr icmpv6 accept
		ip protocol icmp accept
		ip protocol igmp accept

		# Allow the UDP portion of Traceroute
		udp dport { 33434-33524 } accept

		# SSH (port 22)
		tcp dport ssh accept
		tcp dport 7777 accept

		# HTTP (port http)
		tcp dport http accept

		# HTTPS (port https)
		tcp dport https accept

		# RSYNC (port 873)
		tcp dport 873 accept

		# Cockpit
		ip saddr @privileged_hosts_v4 tcp dport 9090 accept
		ip6 saddr @privileged_hosts_v6 tcp dport 9090 accept

		log prefix "nftables-default-denied: " group 0
	}

	chain forward {
		type filter hook forward priority 0;
		policy drop;
	}

	chain output {
		type filter hook output priority 0;
		policy accept;
	}
}

{% if disableDSCP is not defined or disableDSCP != True %}
table ip raw {
	chain postrouting {
		type filter hook postrouting priority -300;

		ip dscp set 0x08
	}
}
table ip6 raw {
	chain postrouting {
		type filter hook postrouting priority -300;

		ip6 dscp set 0x08
	}
}
{% endif %}

